# -*- coding: utf-8 -*-
"""RecSys-Model-1-Deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QTTJvidrmMOipOx5vDmngsMKtxXbdGTP
"""

# Source code for RecSys Model 1 Deployment
# Project Name: One Solution App

# !python --version

# Temporary solution for a bug in the implementation of the tfrs.layers.factorized_top_k module.
# https://github.com/tensorflow/recommenders/issues/712#issuecomment-2041163592

# !pip uninstall tensorflow -y
# !pip uninstall tensorflow-recommenders -y

# import os
# os.environ['TF_USE_LEGACY_KERAS'] = '1'







# !pip install -q tensorflow==2.17
# !pip install -q tensorflow-recommenders==0.7.3


# !pip install -q scann==1.3.4



import numpy as np
from itertools import islice

# from google.colab import drive

import scann
import tensorflow as tf
import tensorflow_recommenders as tfrs

# import geopy
from geopy.distance import geodesic

# import firebase_admin
# from firebase_admin import firestore, credentials



# print(np.__version__)

# #print(scann.__version__)
# !pip show scann

# print(tf.__version__)

# print(tfrs.__version__)

# print(geopy.__version__)

# print(firebase_admin.__version__)

# import tf_keras
# print(tf_keras.__version__)






"""# Loading the Models"""

def load_models():
  '''Take no inputs, loads and returns two tensorflow models.'''

  retrieval_model_path = 'app/recsys_model_one_retrieval'
  ranking_model_path = 'app/recsys_model_one_ranking'

  # Load the models
  retrieval_model = tf.saved_model.load(retrieval_model_path)
  ranking_model = tf.saved_model.load(ranking_model_path)

  return retrieval_model, ranking_model





"""# Retrieve Matching Employees"""

def retrieve_employees(retrieval_model, service_category):
  '''Take a tensoflow model named "retrieval_model" and
  a string "service_category". Returns a list containing
  employee ids that was retrieved from the above model
  based on the specified "service_category".'''

  # Pass a category name and get top recommendations
  scores, employee_ids = retrieval_model(tf.constant([service_category]))

  return employee_ids[0].numpy().tolist()  # Convert EagerTensor to list



"""# Rank Matching Employees"""

def rank_employees(ranking_model, service_category, retrieved_employees):
  '''Take a tensorflow model named "ranking_model", a string "service_category"
  and a list "retrieved_employees". Returns a dictionary containing the top 100 employee ids
  with their ratings that was ranked by the above model based on the "service_category".'''

  ranked_employees = {}

  # giving a rating for each employee id based on the "service_category"
  for employee_id in retrieved_employees:
    ranked_employees[employee_id] = ranking_model({
        "category": np.array([service_category]),
        "employee_id": np.array([employee_id])
    })

  # Convert the dictionary to remove tensors, keeping only the numpy values
  ranked_employees = {key.decode("utf-8"): value.numpy().flatten()[0] for key, value in ranked_employees.items()}

  # Sort the dictionary by values in descending order
  ranked_employees = dict(sorted(ranked_employees.items(), key=lambda item: item[1], reverse=True))

  # Get the first/top 100 employee ids
  return dict(islice(ranked_employees.items(), 100))



"""# Get Data From Firestore"""

def get_firestore_data(ranked_employees, customer_location, firestore_client):
  '''Take a dictionary named "ranked_employees", a tuple named "customer_location"
  and a client to interact with firestore api named "firestore_client". Returns a
  list of dictionaries containing the details of the 20 most nearest (within 20 km radius)
  active employees to the given "customer_location".'''

  recommended_employees = []

  collection_name = 'employees'


  for employee_id in ranked_employees.keys():

    # reference to the firestore document of the given employee id
    doc_ref = firestore_client.collection(collection_name).document(employee_id)

    # retrieving the firestore document of the given employee id
    doc = doc_ref.get()

    if doc.exists:
        employee_data = doc.to_dict()  # convert the document to a dictionary
        if employee_data['status'] == 'active': # take only active employees
          distance_from_customer = geodesic(customer_location, (employee_data['location'].latitude, employee_data['location'].longitude)).km
          if round(distance_from_customer) <= 20: # take only employees who are 20 km away or less from the given "customer_location"
            recommended_employees.append({
                'id': employee_id,
                'latitude': employee_data['location'].latitude,
                'longitude': employee_data['location'].longitude,                
                'address': employee_data['address'],
                'chargePerHour': employee_data['chargePerHour'],
                'email': employee_data['email'],
                'experience': employee_data['experience'],
                'firstName': employee_data['firstName'],
                'lastName': employee_data['lastName'],
                'numOfReviews': employee_data['numOfReviews'],
                'phone': employee_data['phone'],
                'profileImageUrl': employee_data['profileImageUrl'],
                'starCategoryCount': employee_data['starCategoryCount'],
                'stars': employee_data['stars'],
                'distanceFromCustomer': round(distance_from_customer, 2)
                })

  # Sorting the array ascendingly by 'distanceFromCustomer'
  recommended_employees = sorted(recommended_employees, key=lambda x: x['distanceFromCustomer'])

  # Return only the details of the nearest 20 employees
  return recommended_employees[:20]





# drive.mount('/content/drive')

# #JSON_KEY_FILE = '/content/drive/My Drive/firestore-446822-ac05de749f4a.json'

# #JSON_KEY_FILE = "/content/drive/My Drive/service-pa-79ac5-0f0babe13506.json"

# JSON_KEY_FILE = "/content/drive/My Drive/csg3101-service-providing-app-firebase-adminsdk-7xpfw-f39bc603db.json" # Path to Firebase Admin SDK credentials

# os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = JSON_KEY_FILE # Environment Variable with Credentials to Initialize Firebase Admin SDK (used as a backup)

# # Initialize Firebase Admin SDK
# cred = credentials.Certificate(JSON_KEY_FILE)
# firebase_admin.initialize_app(cred)

# db = firestore.Client() # Client for interacting with Google Cloud Firestore API

# service_category = 'Plumbing' # Customer selected service category
# customer_location = (30.0000398, -90.1321281) # lat, long



# retrieval_model, ranking_model = load_models()

# retrieved_employees = retrieve_employees(retrieval_model, service_category)

# ranked_employees = rank_employees(ranking_model, service_category, retrieved_employees)

# recommended_employees = get_firestore_data(ranked_employees, customer_location, db)

# print(type(recommended_employees))

# print(len(recommended_employees))

# print(recommended_employees)